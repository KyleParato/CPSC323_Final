// Kyle Parato - compiler.hpp
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <stack>
#include <vector>

class cmp323{
    public:
        cmp323();

        void set_up_indexs(); // set up maps for fast conversions
        int str_to_row(std::string input);
        int str_to_col(std::string input);
        std::string table_to_string(int row, int col);

        void str_to_stack(std::string input); // takes a string and puts it on stack in reverse order
        void print_stack(); // prints the stack, used for debugging and demonstration purposes

        void clean_code(std::ifstream& input_file, std::ofstream& output_file);
        bool trace_file(std::ifstream& file);
        void translate_file(std::ifstream& input_file, std::ofstream& output_file);

    private:
        std::stack<std::string> trace_stack; // trace stack
        // 
        std::string keywords [7] = {"program", "var", "begin", "end.", "integer", "display", "\"value=\""};
        char spacing_nonterminals [11] = {':', ';', '(', ')', '=', '+', '-', '*', '/', '"', ','};
        // predictive parsing table
                            // 0   1   2   3   4   5   6   7   8   9   p   q   r   s   +   -   *   /   =   (   )   :   ;   ,  display "value=" program begin var end. integer  $
        int table [20][32] ={{201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,   201,     201,     101,  201,201,201,     201,201}, /*<prog>*/
                             {351,351,351,351,351,351,351,351,351,351,102,102,102,102,350,350,350,350,350,350,350,350,350,350,   350,     350,     350,  350,350,350,     350,401}, /*<identifier>*/
                             {104,104,104,104,104,104,104,104,104,104,103,103,103,103,999,999,999,999,999,402,999,999,999,999,   322,     350,     350,  350,322,350,     321,401}, /*I*/
                             {350,350,350,350,350,350,350,350,350,350,106,106,106,106,350,350,350,350,350,350,350,350,350,321,   350,     350,     350,  350,104,350,     350,350}, /*<dec-list>*/
                             {350,350,350,350,350,350,350,350,350,350,108,108,108,108,410,410,410,410,411,410,410,999,350,107,   410,     410,     322,  322,322,322,     321,401}, /*<dec>*/
                             {207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,   207,     207,     322,  207,207,207,     109,401}, /*<type>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,111,111,111,111,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   111,       0,       0,  111,  0,999,       0,204}, /*<stat-list>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,113,113,113,113,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   112,       0,       0,    0,  0,  0,       0,401}, /*<stat>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,116,116,116,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,999,   114,     115,       0,    0,  0,  0,       0,401}, /*<write>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,117,117,117,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   322,       0,       0,    0,  0,  0,       0,401}, /*assign*/
                             {118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,403,403,  0,118,  0,  0,403,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*<expr>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,119,120,  0,  0,  0,  0,999,  0,999,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*Q*/
                             {122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,  0,  0,  0,122,  0,  0,403,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*<term>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,322,322,322,322,322,999,999,123,124,  0,  0,999,  0,999,  0,   322,       0,       0,    0,  0,  0,       0,401}, /*R*/
                             {128,128,128,128,128,128,128,128,128,128,127,127,127,127,128,128,403,403,  0,126,  0,  0,403,  0,   322,       0,       0,    0,  0,  0,       0,401}, /*<factor>*/
                             {130,130,130,130,130,130,130,130,130,130,  0,  0,  0,  0,129,129,  0,  0,  0,  0,  0,  0,  0,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*<number>*/
                             {131,131,131,131,131,131,131,131,131,131,999,999,999,999,999,999,999,999,  0,  0,999,  0,999,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*N*/
                             {999,999,999,999,999,999,999,999,999,999,  0,  0,  0,  0,133,134,  0,  0,  0,  0,  0,  0,  0,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*<sign>*/
                             {136,137,138,139,140,141,142,143,144,145,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,     0,       0,       0,    0,  0,  0,       0,401}, /*<digit>*/
                             {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,146,147,148,149,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,     0,       0,       0,    0,  0,  0,       0,401} /*<letter>*/};

        // maps that store string to index conversions 
        // and table to string convertsion        
        std::map<int, std::string> table_meaning;
        std::map<std::string, int> row_index;
        std::map<std::string, int> col_index;

        std::vector<std::string> var_list; // list of variables, used during runtime
};
